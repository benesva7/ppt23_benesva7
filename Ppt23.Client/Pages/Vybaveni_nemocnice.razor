@page "/vybaveni"
@using Ppt23.Client.Components
@inject HttpClient Http
@if (@seznamVybaveni is null)
{
    <div class="flex items-center justify-center h-screen">
        <div class="w-12 h-12 rounded-full animate-spin
                    border-y-4 border-solid border-blue-900 border-t-transparent"></div>
    </div>
    return;
}
else{
<div class="p-4 ">
    <div class="grid grid-cols-2 justify-evenly text-center items-center my-4">

        <div>
            <p>Pouze na této stránce, nekomunikuje s databází.</p>
            <div class="grid grid-cols-2 border-4 border-red-600">
                <div>
                    <p>Počet vybavení: @seznamVybaveni.Count</p>
                    <button class="twbtn bg-green-500  hover:bg-green-600" @onclick="noveVybaveni">
                        Nový seznam
                    </button>
                </div>
                <div>
                    <p>Pro přidání náhodných předmětů do seznamu zadejte počet předmětů a potvrďte tlačítkem "Přidat náhodné vybavení"</p>
                    <input class="border-2 border-blue-700" type="text" @bind-value=@oninput />
                    <button class="twbtn bg-amber-500 mx-2 hover:bg-amber-600" @onclick="pridatVybaveni">
                        Přidat náhodné vybavení
                    </button><br>@error
                </div>
            </div>
        </div>
        <div>
            <button class="twbtn bg-fuchsia-700  hover:bg-fuchsia-800" @onclick="()=> {newModel = new VybaveniVm(); isInNewMode = true;}">
                Přidat konkrétní vybavení
            </button>
        </div>
    </div>
 

    <div class="grid grid-cols-6 border-b-2 border-black font-bold">
        <div class=" w-full h-full">Název</div>
        <div class=" w-full h-full">Cena (Kč)</div>
        <div class=" w-full h-full">Datum nákupu</div>
        <div class=" w-full h-full">Datum poslední revize</div>
        <div class=" w-full h-full">Potřebuje revizi?</div>
    </div>
    <div>
        @if (isInNewMode)
        {
            ArgumentNullException.ThrowIfNull(newModel);
            <div class=" my-1">
                <VybaveRow IsInEditMode=true Vyb="newModel" EditDoneCallback="async () =>  { await VytvorVybaveni(newModel);isInNewMode = false;}">

                    <div class="flex justify-center gap-2">

                        <button type="submit" class="twbtn bg-teal-500 hover:bg-teal-600">Přidat</button>
                        <button type="button" @onclick="() => isInNewMode = false" class="twbtn bg-yellow-500 hover:bg-yellow-600">Zrušit</button>

                    </div>
                </VybaveRow>
            </div>
        }

        @foreach (VybaveniVm vyb in seznamVybaveni)
            {
                <div class="grid grid-cols-6 my-1 @((vyb.IsRevisionNeeded) ? "bg-red-400" : "")">
                    <VybaveRow Vyb="vyb"
                       SmazEventCallback="() => SmazVybaveni(vyb)"
                       RevizeEventCallback="async () => {vyb.LastRevisionDateTime=DateTime.Now; await UpravVybaveni(vyb);}"
                       EditDoneCallback="async () =>  await UpravVybaveni(vyb)"
                       UkonEventCallback="async () => await VytvorUkon(vyb)">
                </VybaveRow>
            </div>
        }
    </div>
</div>
}



@code {

    List<VybaveniVm>? seznamVybaveni;
    string? oninput;
    string? error;
    VybaveniVm? newModel;
    UkonyVm? ukonyVm;
    bool isInNewMode;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniVm>>("vybaveni");
    }

    public async Task SmazVybaveni(VybaveniVm vyb)
    {
        HttpResponseMessage odpoved = await Http.DeleteAsync($"vybaveni/{vyb.Id}");
        if (odpoved.IsSuccessStatusCode)
        {
            seznamVybaveni?.Remove(vyb);
            Console.WriteLine("delete hotov");
        }
        else
        {
            Console.WriteLine("delete chyba");
        }

    }
    public async Task UpravVybaveni(VybaveniVm upravene)
    {
        Console.WriteLine(upravene.Id);

        HttpResponseMessage odpoved = await Http.PutAsJsonAsync($"vybaveni/{upravene.Id}", upravene);

        if (odpoved.IsSuccessStatusCode)
        {
            Console.WriteLine("put hotov");
        }
        else
        {
            Console.WriteLine("put chyba ");
        }
    }
    public async Task VytvorVybaveni(VybaveniVm nove)
    {
        HttpResponseMessage odpoved = await Http.PostAsJsonAsync("vybaveni", nove);


        if (odpoved.IsSuccessStatusCode)
        {/*
        VybaveniVm? vysledek = await odpoved.Content.ReadFromJsonAsync<VybaveniVm>();
        if(vysledek != null)
        {
            nove.Id = vysledek.Id;
            seznamVybaveni.Insert(0, nove);
    }*/
            seznamVybaveni = await Http.GetFromJsonAsync<List<VybaveniVm>>("vybaveni");
            //StateHasChanged();
            Console.WriteLine("post hotov");

        }
        else
        {
            Console.WriteLine("post chyba");
        }
    }
    public async Task VytvorUkon(VybaveniVm nove)
    {
        var id = nove.Id;
        ukonyVm = new UkonyVm
            {
                Name = VybaveniVm.RandomString(),
                ActionDateTime = DateTime.Now
            };
        HttpResponseMessage odpoved = await Http.PostAsJsonAsync<UkonyVm>($"ukony/{id}", ukonyVm);
    }
    /*
    public Vybaveni_nemocnice()
    {
        seznamVybaveni = VybaveniVm.VratRandSeznam(15);
    }*/

    //TODO: upravit pro synchronizaci s api
    public void noveVybaveni()
    {
        seznamVybaveni?.Clear();
        seznamVybaveni = VybaveniVm.VratRandSeznam(15);
    }
    public void pridatVybaveni()
    {
        error = "";
        if (!int.TryParse(oninput, out int pocet))
        {
            error = "Musíš zadat celé číslo.";
        }
        else if (pocet < 0)
        {
            error = "Zadat lze pouze nezáporné číslo.";
        }
        else
        {
            List<VybaveniVm> List = VybaveniVm.VratRandSeznam(pocet);
            for (int i = 0; i < List.Count; i++)
            {
                seznamVybaveni?.Insert(i, List[i]);
            }
        }

    }
}

