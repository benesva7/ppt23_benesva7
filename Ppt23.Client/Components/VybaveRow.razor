@using Microsoft.AspNetCore.Components.Forms

@if (Vyb == null) return;

@{
    @if (Vyb == null && IsInEditMode)
        TurnOnEdit();

}

@if (Vyb != null && !IsInEditMode)
{
    <div class="py-1.5">@Vyb.Name</div>
    <div class="py-1.5">@Vyb.Price.ToString("N0")</div>
    <div class="py-1.5">@Vyb.BoughtDateTime.ToString("dd-MM-yyyy")</div>
    <div class="py-1.5">@Vyb.LastRevisionDateTime.ToString("dd-MM-yyyy")</div>
    <div class="py-1.5">@((Vyb.IsRevisionNeeded) ? "Ano" : "Ne")</div>
    <div class="flex justify-center gap-2">
        <button class="twbtn bg-cyan-500 hover:bg-cyan-600 "onclick="window.location.href='vybaveni/{@Vyb.Id}'">🔍</button>
        <button class="twbtn bg-red-500 hover:bg-red-600 " @onclick="() => SmazEventCallback.InvokeAsync()">✕</button>
        <button class="twbtn bg-emerald-500 hover:bg-emerald-600" @onclick="() => RevizeEventCallback.InvokeAsync()">Provést revizi</button>
        <button class="twbtn bg-yellow-400 hover:bg-yellow-500" @onclick="() => TurnOnEdit()">✏️</button>
    </div>
}
else if (EditVyb != null && IsInEditMode)
{
    <EditForm class="col-span-6" Model=EditVyb OnValidSubmit="() => TurnOffEdit(true)">
        <DataAnnotationsValidator />
        <div class="border-2 border-gray-500 p-1">
            <div class="grid grid-cols-6 ">
                <div class="p-1">
                    <InputText class="border-2 border-gray-400 " @bind-Value=@EditVyb.Name />
                    <ValidationMessage For="() => EditVyb.Name" />
                </div>

                <div class="pt-1">
                    <InputNumber class="border-2 border-gray-400 " @bind-Value=@EditVyb.Price />
                    <ValidationMessage For="() => EditVyb.Price" />
                </div>
                <div class="pt-1">
                    <InputDate class="border-2 border-gray-400 " @bind-Value=@EditVyb.BoughtDateTime />

                </div>
                <div class="pt-1">
                    <InputDate class="border-2 border-gray-400 " @bind-Value=@EditVyb.LastRevisionDateTime />
                    <ValidationMessage For="() => EditVyb.LastRevisionDateTime" />
                </div>
                <div class="pt-1.5">@((EditVyb.IsRevisionNeeded) ? "Ano" : "Ne")</div>

                @if (ChildContent == null)
                {
                    <div class="flex justify-center gap-2">
                        <button class="twbtn bg-green-500  hover:bg-green-600">✅</button>
                        <button class="twbtn bg-red-500  hover:bg-red-600" type="button" @onclick="() => TurnOffEdit(false)">✕</button>
                    </div>
                }
                else
                {
                    @ChildContent
                }
            </div>
        </div>

    </EditForm>
}

@code {
    //[Parameter] public VybaveniVm? Vyb { get; set; }
    [Parameter] public EventCallback SmazEventCallback { get; set; }
    [Parameter] public EventCallback RevizeEventCallback { get; set; }
    [Parameter] public EventCallback EditDoneCallback { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsInEditMode { get; set; }



    VybaveniVm? _Vyb;
    VybaveniVm? EditVyb;

    [Parameter]
    public VybaveniVm? Vyb
    {
        get => _Vyb;
        set
        {
            _Vyb = value;
            if (value != null && IsInEditMode)
            {
                TurnOnEdit();
            }
        }
    }

    private void TurnOnEdit()
    {
        if (Vyb != null)
        {
            IsInEditMode = true;
            EditVyb = Vyb.Copy();
        }
    }

    private void TurnOffEdit(bool success)
    {
        if (success)
        {
            EditVyb?.MapTo(Vyb);
        }
        if (Vyb is not null)
            IsInEditMode = false;
        EditVyb = null;
        EditDoneCallback.InvokeAsync(success);
    }

}
